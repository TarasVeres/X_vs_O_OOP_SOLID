class NotValidNamePlayer(Exception):
    """–Ü–º'—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –Ω–µ–≤–∞–ª—ñ–¥–Ω–µ"""

    def __str__(self):
        return "\n–Ü–º'—è –≤–≤–µ–¥–µ–Ω–æ –Ω–µ–≤–∞–ª—ñ–¥–Ω–æ."


class NotCellsBusy(Exception):
    """–í—ñ–¥—Å—É—Ç–Ω—ñ –≤—ñ–ª—å–Ω—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏"""
    pass


class CellBusy(Exception):
    """–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞"""

    def __str__(self):
        return "\n–ö–ª—ñ—Ç–∏–Ω–∫–∞ –∑–∞–π–Ω—è—Ç–∞, –æ–±–µ—Ä—ñ—Ç—å —ñ–Ω—à—É.\n"


class NotValidStep(TypeError):
    """–ù–µ–≤–∞–ª—ñ–¥–Ω–∏–π —Ö—ñ–¥"""

    def __str__(self):
        return "\n–í–∞—à —Ö—ñ–¥ –Ω–µ –≤–∞–ª—ñ–¥–Ω–∏–π! –¶–µ –ø–æ–≤–∏–Ω–Ω–æ –±—É—Ç–∏ –¥–≤–∞ —á–∏—Å–ª–∞ —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª –≤—ñ–¥ 1 –¥–æ 3"


class Cell:  # –∫–ª–∞—Å –∫–ª—ñ—Ç–∏–Ω–∫–∏
    def __init__(self, coordinate):
        self.__cell = None  # –º–∞—Ä–∫–µ—Ä –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –• –∞–±–æ –û
        self.__coordinate = coordinate

    @property
    def cell(self):
        return self.__cell

    @cell.setter
    def cell(self, marker):
        self.__cell = marker

    @property
    def coordinate(self):
        return self.__coordinate

    @coordinate.setter
    def coordinate(self, coordinate):
        self.__coordinate = coordinate

    def __bool__(self):
        return False if self.cell else True

    def __repr__(self):
        return self.cell if self.cell else '  '


class Field:  # –∫–ª–∞—Å –ø–æ–ª—è
    def __init__(self, size_field=3):
        self.field = self.init_field(size_field)  # –≤–∫–ª–∞–¥–µ–Ω–∏–π –∫–æ—Ä—Ç–µ–∂ –∫–æ–∂–Ω–∏–π –µ–ª–µ–º–µ–Ω—Ç –æ–∫—Ä–µ–º–∏–π —Ä—è–¥–æ–∫

    def __getitem__(self, item):
        return self.field[item]

    def __setitem__(self, key, value):
        row, col = key
        self.field[row][col].cell = value

    @staticmethod
    def init_field(size_field):  # —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –ø–æ–ª—è –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ–≥–æ —Ä–æ–∑–º—ñ—Ä—É
        return [[Cell((x, y)) for y in range(size_field)] for x in range(size_field)]

    def check_free_field(self):  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–ª—è –Ω–∞ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –ø—É—Å—Ç–∏—Ö –∫–ª—ñ—Ç–∏–Ω–æ–∫ False - –ø—É—Å—Ç—ñ –∫–ª—ñ—Ç–∏–Ω–∫–∏ —î
        for row in self.field:
            if any(cell for cell in row):
                return False
        raise NotCellsBusy

    def check_free_cell(self, col, row):  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ —Ç–µ —â–æ –∫–ª—ñ—Ç–∏–Ω–∫–∞ –±–µ–∑ –º–∞—Ä–∫–µ—Ä–∞
        return self.field[col][row]

    def cell_marker_field(self, coordinate, marker):  # –∑–º—ñ–Ω—é—î –º–∞—Ä–∫–µ—Ä –≤ –∫–ª—ñ—Ç–∏–Ω—Ü—ñ –Ω–∞ –º–∞—Ä–∫–µ—Ä –≥—Ä–∞–≤—Ü—è
        col, row = coordinate
        if self.check_free_cell(col, row):
            self[coordinate] = marker
        else:
            raise CellBusy

    def __str__(self):  # –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –ø–æ–ª—è –≤ –∫–æ–Ω—Å–æ–ª—ñ
        show_field = ''
        for col in self.field:
            for cell in col:
                show_field += cell.__repr__() + '|'
            show_field = show_field[:-1] + '\n'
        return show_field


class Player:  # –∫–ª–∞—Å –≥—Ä–∞–≤—Ü—è
    def __init__(self, name, marker):
        self.name = name  # —ñ–º'—è –≥—Ä–∞–≤—Ü—è
        self.marker = marker  # –º–∞—Ä–∫–µ—Ä –≥—Ä–∞–≤—Ü—è
        self.steps = []

    def add_step(self, coordinate):  # –¥–æ–¥–∞—î —Ö—ñ–¥ –≥—Ä–∞–≤—Ü—è –¥–æ —Å–ø–∏—Å–∫—É –∑—Ä–æ–±–ª–µ–Ω–∏—Ö —Ö–æ–¥—ñ–≤ –≥—Ä–∞–≤—Ü–µ–º
        self.steps.append(coordinate)

    def __str__(self):
        return self.name


class GameController:
    win_combination = [
        [[0, 0], [0, 1], [0, 2]], [[0, 0], [1, 0], [2, 0]],
        [[0, 0], [1, 1], [2, 2]], [[0, 1], [1, 1], [2, 1]],
        [[0, 2], [1, 1], [2, 0]], [[0, 2], [1, 2], [2, 2]],
        [[1, 0], [1, 1], [1, 2]], [[2, 0], [2, 1], [2, 2]]
    ]

    def __init__(self, player_1, player_2, field):
        self.player_1 = player_1
        self.player_2 = player_2
        self.field = field
        self.current_player = player_1

    def switch_player(self):  # –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å
        self.current_player = self.player_2 if self.current_player == self.player_1 else self.player_1

    def make_move(self, coordinate):
        try:
            self.field.cell_marker_field(coordinate, self.current_player.marker)
            self.current_player.add_step(coordinate)
        except CellBusy as e:
            print(e)
            return False
        return True

    @classmethod
    def check_win(cls, player):  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —á–∏ –º–∞—î –≥—Ä–∞–≤–µ—Ü—å –≤–∏–≥—Ä–∞—à–Ω—É –∫–æ–º–±—ñ–Ω–∞—Ü—ñ—é
        for combination in cls.win_combination:
            if all(comb in player.steps for comb in combination):
                return True
        return False

    @staticmethod
    def validate_step(move_input):  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ö–æ–¥—É –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å
        try:
            step = [int(i) for i in move_input.split()]
            if all(i in range(1, 4) for i in step):
                return [i - 1 for i in step]
            raise NotValidStep
        except (TypeError, ValueError, NotValidStep):
            print(NotValidStep())

    def play_game(self):
        while True:
            print(self.field)
            player = self.current_player
            print(f'–ì—Ä–∞–≤–µ—Ü—å {player}, –≤–∞—à —Ö—ñ–¥!')
            coordinate = self.validate_step(input('–í–≤–µ–¥—ñ—Ç—å –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏ (—Ä—è–¥–æ–∫ —Ç–∞ —Å—Ç–æ–≤–ø–µ—Ü—å, –≤—ñ–¥ 1 –¥–æ 3) —á–µ—Ä–µ–∑ –ø—Ä–æ–±—ñ–ª: '))
            if self.make_move(coordinate):
                if self.check_win(player):
                    print(self.field)
                    print(f"–ì—Ä–∞–≤–µ—Ü—å {player} –≤–∏–≥—Ä–∞–≤!")
                    break
                if self.field.check_free_field():
                    print(self.field)
                    print("–ù—ñ—á–∏—è!")
                    break
                self.switch_player()


class Play:  # –∫–ª–∞—Å –≥—Ä–∏
    def __new__(cls, *args, **kwargs):
        print("******** –í—ñ—Ç–∞—î–º–æ —É –≥—Ä—ñ —Ö—Ä–µ—Å—Ç–∏–∫–∏ - –Ω–æ–ª–∏–∫–∏! ********\n")
        return object.__new__(cls)

    def __init__(self):
        self.player_1 = Player(self.input_player_name('X'), marker='‚ùé')
        self.player_2 = Player(self.input_player_name('O'), marker='üî¥')
        self.field = Field()
        self.game_controller = GameController(self.player_1, self.player_2, self.field)

    def input_player_name(self, marker):  # —Å—Ç–∞—Ä—Ç –Ω–æ–≤–æ—ó –≥—Ä–∏
        print(f"–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –≥—Ä–∞–≤—Ü—è, —è–∫–∏–π –±—É–¥–µ –≥—Ä–∞—Ç–∏ –∑–∞ -{marker}- —Ç–∞ –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å Enter")
        try:
            return self.validate_player_name(input('–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è: '))
        except NotValidNamePlayer as e:
            print(e)
            return self.input_player_name(marker)

    @staticmethod  # –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—å —ñ–º–µ–Ω—ñ –≥—Ä–∞—Ü—è
    def validate_player_name(name):
        if isinstance(name, str) and name:
            return name
        raise NotValidNamePlayer

    def __call__(self, *args, **kwargs):
        self.game_controller.play_game()


if __name__ == '__main__':
    game = Play()
    game()
